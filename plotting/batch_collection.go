// generated by collections; github.com/jmatosp/collections; DO NOT EDIT

package plotting

import (
	"fmt"
	"sort"
)

type EligiblebatchDurationSummaryFilterFunc func(item batchDurationSummary) bool

func (_c batchDurationSummaries) Filter(eligible EligiblebatchDurationSummaryFilterFunc) batchDurationSummaries {
	var result batchDurationSummaries
	for _, item := range _c {
		if eligible(item) {
			result = append(result, item)
		}
	}
	return result
}

func (_c batchDurationSummaries) First() batchDurationSummary {
	if len(_c) == 0 {
		return batchDurationSummary{}
	}
	return _c[0]
}

type batchDurationSummaryLessFunc func(item, other batchDurationSummary) bool

func (_c batchDurationSummaries) Sort(less batchDurationSummaryLessFunc) batchDurationSummaries {
	cCopy := _c
	sort.Slice(cCopy, func(i, j int) bool {
		return less(cCopy[i], cCopy[j])
	})
	return cCopy
}

type batchDurationSummaryApplyFunc func(item batchDurationSummary)

func (_c batchDurationSummaries) Apply(applyFunc batchDurationSummaryApplyFunc) {
	for _, item := range _c {
		applyFunc(item)
	}
}

type batchDurationSummaryMapFunc func(item batchDurationSummary) batchDurationSummary

func (_c batchDurationSummaries) Map(mapFunc batchDurationSummaryMapFunc) batchDurationSummaries {
	var result batchDurationSummaries
	_c.Apply(func(item batchDurationSummary) {
		result = append(result, mapFunc(item))
	})
	return result
}

type batchDurationSummaryMapToIntsFunc func(item batchDurationSummary) int

func (_c batchDurationSummaries) MapToInts(mapFunc batchDurationSummaryMapToIntsFunc) []int {
	var result []int
	_c.Apply(func(item batchDurationSummary) {
		result = append(result, mapFunc(item))
	})
	return result
}

type batchDurationSummaryMapToStringsFunc func(item batchDurationSummary) string

func (_c batchDurationSummaries) MapToStrings(mapFunc batchDurationSummaryMapToStringsFunc) []string {
	var result []string
	_c.Apply(func(item batchDurationSummary) {
		result = append(result, mapFunc(item))
	})
	return result
}

func (_c batchDurationSummaries) Println() {
	fmt.Println(_c)
}

func (_c batchDurationSummaries) Print() {
	_c.Apply(func(item batchDurationSummary) {
		fmt.Print(item)
	})
}

func (_c batchDurationSummaries) String() string {
	var result string
	_c.Apply(func(item batchDurationSummary) {
		result = result + fmt.Sprintln(item)
	})
	return result
}
