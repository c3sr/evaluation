// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package evaluation

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	dlframework "github.com/rai-project/dlframework"
	eventflow "github.com/rai-project/evaluation/eventflow"
	json1 "github.com/uber/jaeger/model/json"
	bson "gopkg.in/mgo.v2/bson"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson679db3deDecodeGithubComRaiProjectEvaluation(in *jlexer.Lexer, out *structuredError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "traceID":
			out.TraceID = json1.TraceID(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation(out *jwriter.Writer, in structuredError) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	if in.Msg != "" {
		const prefix string = ",\"msg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Msg))
	}
	if in.TraceID != "" {
		const prefix string = ",\"traceID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TraceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v structuredError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v structuredError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *structuredError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *structuredError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation1(in *jlexer.Lexer, out *TraceInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Traces = nil
			} else {
				in.Delim('[')
				if out.Traces == nil {
					if !in.IsDelim(']') {
						out.Traces = make([]json1.Trace, 0, 1)
					} else {
						out.Traces = []json1.Trace{}
					}
				} else {
					out.Traces = (out.Traces)[:0]
				}
				for !in.IsDelim(']') {
					var v1 json1.Trace
					easyjson679db3deDecodeGithubComUberJaegerModelJson(in, &v1)
					out.Traces = append(out.Traces, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]structuredError, 0, 1)
					} else {
						out.Errors = []structuredError{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v2 structuredError
					(v2).UnmarshalEasyJSON(in)
					out.Errors = append(out.Errors, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation1(out *jwriter.Writer, in TraceInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Traces) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.Traces {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson(out, v4)
			}
			out.RawByte(']')
		}
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Total))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	if len(in.Errors) != 0 {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Errors {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation1(l, v)
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson(in *jlexer.Lexer, out *json1.Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traceID":
			out.TraceID = json1.TraceID(in.String())
		case "spans":
			if in.IsNull() {
				in.Skip()
				out.Spans = nil
			} else {
				in.Delim('[')
				if out.Spans == nil {
					if !in.IsDelim(']') {
						out.Spans = make([]json1.Span, 0, 1)
					} else {
						out.Spans = []json1.Span{}
					}
				} else {
					out.Spans = (out.Spans)[:0]
				}
				for !in.IsDelim(']') {
					var v7 json1.Span
					easyjson679db3deDecodeGithubComUberJaegerModelJson1(in, &v7)
					out.Spans = append(out.Spans, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "processes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Processes = make(map[json1.ProcessID]json1.Process)
				} else {
					out.Processes = nil
				}
				for !in.IsDelim('}') {
					key := json1.ProcessID(in.String())
					in.WantColon()
					var v8 json1.Process
					easyjson679db3deDecodeGithubComUberJaegerModelJson2(in, &v8)
					(out.Processes)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]string, 0, 4)
					} else {
						out.Warnings = []string{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Warnings = append(out.Warnings, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson(out *jwriter.Writer, in json1.Trace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"traceID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TraceID))
	}
	{
		const prefix string = ",\"spans\":"
		out.RawString(prefix)
		if in.Spans == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Spans {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson1(out, v11)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"processes\":"
		out.RawString(prefix)
		if in.Processes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Processes {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				easyjson679db3deEncodeGithubComUberJaegerModelJson2(out, v12Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"warnings\":"
		out.RawString(prefix)
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Warnings {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson2(in *jlexer.Lexer, out *json1.Process) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviceName":
			out.ServiceName = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]json1.KeyValue, 0, 1)
					} else {
						out.Tags = []json1.KeyValue{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v15 json1.KeyValue
					easyjson679db3deDecodeGithubComUberJaegerModelJson3(in, &v15)
					out.Tags = append(out.Tags, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson2(out *jwriter.Writer, in json1.Process) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"serviceName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Tags {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson3(out, v17)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson3(in *jlexer.Lexer, out *json1.KeyValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "type":
			out.Type = json1.ValueType(in.String())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson3(out *jwriter.Writer, in json1.KeyValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson1(in *jlexer.Lexer, out *json1.Span) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traceID":
			out.TraceID = json1.TraceID(in.String())
		case "spanID":
			out.SpanID = json1.SpanID(in.String())
		case "parentSpanID":
			out.ParentSpanID = json1.SpanID(in.String())
		case "flags":
			out.Flags = uint32(in.Uint32())
		case "operationName":
			out.OperationName = string(in.String())
		case "references":
			if in.IsNull() {
				in.Skip()
				out.References = nil
			} else {
				in.Delim('[')
				if out.References == nil {
					if !in.IsDelim(']') {
						out.References = make([]json1.Reference, 0, 1)
					} else {
						out.References = []json1.Reference{}
					}
				} else {
					out.References = (out.References)[:0]
				}
				for !in.IsDelim(']') {
					var v18 json1.Reference
					easyjson679db3deDecodeGithubComUberJaegerModelJson4(in, &v18)
					out.References = append(out.References, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "startTime":
			out.StartTime = uint64(in.Uint64())
		case "duration":
			out.Duration = uint64(in.Uint64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]json1.KeyValue, 0, 1)
					} else {
						out.Tags = []json1.KeyValue{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v19 json1.KeyValue
					easyjson679db3deDecodeGithubComUberJaegerModelJson3(in, &v19)
					out.Tags = append(out.Tags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]json1.Log, 0, 2)
					} else {
						out.Logs = []json1.Log{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v20 json1.Log
					easyjson679db3deDecodeGithubComUberJaegerModelJson5(in, &v20)
					out.Logs = append(out.Logs, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "processID":
			out.ProcessID = json1.ProcessID(in.String())
		case "process":
			if in.IsNull() {
				in.Skip()
				out.Process = nil
			} else {
				if out.Process == nil {
					out.Process = new(json1.Process)
				}
				easyjson679db3deDecodeGithubComUberJaegerModelJson2(in, out.Process)
			}
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]string, 0, 4)
					} else {
						out.Warnings = []string{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.Warnings = append(out.Warnings, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson1(out *jwriter.Writer, in json1.Span) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"traceID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TraceID))
	}
	{
		const prefix string = ",\"spanID\":"
		out.RawString(prefix)
		out.String(string(in.SpanID))
	}
	if in.ParentSpanID != "" {
		const prefix string = ",\"parentSpanID\":"
		out.RawString(prefix)
		out.String(string(in.ParentSpanID))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Flags))
	}
	{
		const prefix string = ",\"operationName\":"
		out.RawString(prefix)
		out.String(string(in.OperationName))
	}
	{
		const prefix string = ",\"references\":"
		out.RawString(prefix)
		if in.References == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.References {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson4(out, v23)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.StartTime))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Duration))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Tags {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson3(out, v25)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Logs {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson5(out, v27)
			}
			out.RawByte(']')
		}
	}
	if in.ProcessID != "" {
		const prefix string = ",\"processID\":"
		out.RawString(prefix)
		out.String(string(in.ProcessID))
	}
	if in.Process != nil {
		const prefix string = ",\"process\":"
		out.RawString(prefix)
		easyjson679db3deEncodeGithubComUberJaegerModelJson2(out, *in.Process)
	}
	{
		const prefix string = ",\"warnings\":"
		out.RawString(prefix)
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Warnings {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson5(in *jlexer.Lexer, out *json1.Log) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]json1.KeyValue, 0, 1)
					} else {
						out.Fields = []json1.KeyValue{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v30 json1.KeyValue
					easyjson679db3deDecodeGithubComUberJaegerModelJson3(in, &v30)
					out.Fields = append(out.Fields, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson5(out *jwriter.Writer, in json1.Log) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Fields {
				if v31 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComUberJaegerModelJson3(out, v32)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson4(in *jlexer.Lexer, out *json1.Reference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refType":
			out.RefType = json1.ReferenceType(in.String())
		case "traceID":
			out.TraceID = json1.TraceID(in.String())
		case "spanID":
			out.SpanID = json1.SpanID(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson4(out *jwriter.Writer, in json1.Reference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"refType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RefType))
	}
	{
		const prefix string = ",\"traceID\":"
		out.RawString(prefix)
		out.String(string(in.TraceID))
	}
	{
		const prefix string = ",\"spanID\":"
		out.RawString(prefix)
		out.String(string(in.SpanID))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation2(in *jlexer.Lexer, out *SystemMemoryInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start_available":
			out.StartAvailable = int64(in.Int64())
		case "start_free":
			out.StartFree = int64(in.Int64())
		case "start_total":
			out.StartTotal = int64(in.Int64())
		case "finish_available":
			out.FinishAvailable = int64(in.Int64())
		case "finish_free":
			out.FinishFree = int64(in.Int64())
		case "finish_total":
			out.FinishTotal = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation2(out *jwriter.Writer, in SystemMemoryInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartAvailable != 0 {
		const prefix string = ",\"start_available\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.StartAvailable))
	}
	if in.StartFree != 0 {
		const prefix string = ",\"start_free\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartFree))
	}
	if in.StartTotal != 0 {
		const prefix string = ",\"start_total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartTotal))
	}
	if in.FinishAvailable != 0 {
		const prefix string = ",\"finish_available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishAvailable))
	}
	if in.FinishFree != 0 {
		const prefix string = ",\"finish_free\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishFree))
	}
	if in.FinishTotal != 0 {
		const prefix string = ",\"finish_total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishTotal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemMemoryInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemMemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemMemoryInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemMemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation2(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation3(in *jlexer.Lexer, out *SummaryPredictAccuracyInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "top1_accuracy":
			out.Top1Accuracy = float64(in.Float64())
		case "top5_accuracy":
			out.Top5Accuracy = float64(in.Float64())
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation3(out *jwriter.Writer, in SummaryPredictAccuracyInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Top1Accuracy != 0 {
		const prefix string = ",\"top1_accuracy\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Top1Accuracy))
	}
	if in.Top5Accuracy != 0 {
		const prefix string = ",\"top5_accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Top5Accuracy))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryPredictAccuracyInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryPredictAccuracyInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryPredictAccuracyInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryPredictAccuracyInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation3(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation4(in *jlexer.Lexer, out *SummaryModelLatencyInformations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SummaryModelLatencyInformations, 0, 1)
			} else {
				*out = SummaryModelLatencyInformations{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v33 SummaryModelLatencyInformation
			(v33).UnmarshalEasyJSON(in)
			*out = append(*out, v33)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation4(out *jwriter.Writer, in SummaryModelLatencyInformations) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v34, v35 := range in {
			if v34 > 0 {
				out.RawByte(',')
			}
			(v35).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryModelLatencyInformations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryModelLatencyInformations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryModelLatencyInformations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryModelLatencyInformations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation4(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation5(in *jlexer.Lexer, out *SummaryModelLatencyInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "durations":
			if in.IsNull() {
				in.Skip()
				out.Durations = nil
			} else {
				in.Delim('[')
				if out.Durations == nil {
					if !in.IsDelim(']') {
						out.Durations = make([]float64, 0, 8)
					} else {
						out.Durations = []float64{}
					}
				} else {
					out.Durations = (out.Durations)[:0]
				}
				for !in.IsDelim(']') {
					var v36 float64
					v36 = float64(in.Float64())
					out.Durations = append(out.Durations, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "duration":
			out.Duration = float64(in.Float64())
		case "latency":
			out.Latency = float64(in.Float64())
		case "throughput":
			out.Throughput = float64(in.Float64())
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation5(out *jwriter.Writer, in SummaryModelLatencyInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Durations) != 0 {
		const prefix string = ",\"durations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v37, v38 := range in.Durations {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v38))
			}
			out.RawByte(']')
		}
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Duration))
	}
	if in.Latency != 0 {
		const prefix string = ",\"latency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Latency))
	}
	if in.Throughput != 0 {
		const prefix string = ",\"throughput\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Throughput))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryModelLatencyInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryModelLatencyInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryModelLatencyInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryModelLatencyInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation5(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation6(in *jlexer.Lexer, out *SummaryModelInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "durations":
			if in.IsNull() {
				in.Skip()
				out.Durations = nil
			} else {
				in.Delim('[')
				if out.Durations == nil {
					if !in.IsDelim(']') {
						out.Durations = make([]uint64, 0, 8)
					} else {
						out.Durations = []uint64{}
					}
				} else {
					out.Durations = (out.Durations)[:0]
				}
				for !in.IsDelim(']') {
					var v39 uint64
					v39 = uint64(in.Uint64())
					out.Durations = append(out.Durations, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation6(out *jwriter.Writer, in SummaryModelInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Durations) != 0 {
		const prefix string = ",\"durations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v40, v41 := range in.Durations {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v41))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryModelInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryModelInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryModelInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryModelInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation6(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation7(in *jlexer.Lexer, out *SummaryMemoryInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "memory_informations":
			if in.IsNull() {
				in.Skip()
				out.MemoryInformations = nil
			} else {
				in.Delim('[')
				if out.MemoryInformations == nil {
					if !in.IsDelim(']') {
						out.MemoryInformations = make([]MemoryInformation, 0, 1)
					} else {
						out.MemoryInformations = []MemoryInformation{}
					}
				} else {
					out.MemoryInformations = (out.MemoryInformations)[:0]
				}
				for !in.IsDelim(']') {
					var v42 MemoryInformation
					(v42).UnmarshalEasyJSON(in)
					out.MemoryInformations = append(out.MemoryInformations, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation7(out *jwriter.Writer, in SummaryMemoryInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MemoryInformations) != 0 {
		const prefix string = ",\"memory_informations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v43, v44 := range in.MemoryInformations {
				if v43 > 0 {
					out.RawByte(',')
				}
				(v44).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryMemoryInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryMemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryMemoryInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryMemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation7(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation8(in *jlexer.Lexer, out *SummaryLayerInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layer_informations":
			(out.LayerInformations).UnmarshalEasyJSON(in)
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation8(out *jwriter.Writer, in SummaryLayerInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.LayerInformations) != 0 {
		const prefix string = ",\"layer_informations\":"
		first = false
		out.RawString(prefix[1:])
		(in.LayerInformations).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryLayerInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryLayerInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryLayerInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryLayerInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation8(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation9(in *jlexer.Lexer, out *SummaryLayerAggregatedInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layer_aggregated_informations":
			if in.IsNull() {
				in.Skip()
				out.LayerAggregatedInformations = nil
			} else {
				in.Delim('[')
				if out.LayerAggregatedInformations == nil {
					if !in.IsDelim(']') {
						out.LayerAggregatedInformations = make(LayerAggregatedInformations, 0, 1)
					} else {
						out.LayerAggregatedInformations = LayerAggregatedInformations{}
					}
				} else {
					out.LayerAggregatedInformations = (out.LayerAggregatedInformations)[:0]
				}
				for !in.IsDelim(']') {
					var v45 LayerAggregatedInformation
					easyjson679db3deDecodeGithubComRaiProjectEvaluation10(in, &v45)
					out.LayerAggregatedInformations = append(out.LayerAggregatedInformations, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation9(out *jwriter.Writer, in SummaryLayerAggregatedInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.LayerAggregatedInformations) != 0 {
		const prefix string = ",\"layer_aggregated_informations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v46, v47 := range in.LayerAggregatedInformations {
				if v46 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComRaiProjectEvaluation10(out, v47)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryLayerAggregatedInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryLayerAggregatedInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryLayerAggregatedInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryLayerAggregatedInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation9(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation10(in *jlexer.Lexer, out *LayerAggregatedInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "occurences":
			out.Occurences = int(in.Int())
		case "occurence_percentage":
			out.OccurencePercentage = float32(in.Float32())
		case "duration":
			out.Duration = float64(in.Float64())
		case "duration_percentage":
			out.DurationPercentage = float32(in.Float32())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation10(out *jwriter.Writer, in LayerAggregatedInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Occurences != 0 {
		const prefix string = ",\"occurences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Occurences))
	}
	if in.OccurencePercentage != 0 {
		const prefix string = ",\"occurence_percentage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OccurencePercentage))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Duration))
	}
	if in.DurationPercentage != 0 {
		const prefix string = ",\"duration_percentage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DurationPercentage))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation11(in *jlexer.Lexer, out *SummaryEventFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_flow":
			if in.IsNull() {
				in.Skip()
				out.EventFlow = nil
			} else {
				in.Delim('[')
				if out.EventFlow == nil {
					if !in.IsDelim(']') {
						out.EventFlow = make(eventflow.Events, 0, 1)
					} else {
						out.EventFlow = eventflow.Events{}
					}
				} else {
					out.EventFlow = (out.EventFlow)[:0]
				}
				for !in.IsDelim(']') {
					var v48 eventflow.Event
					easyjson679db3deDecodeGithubComRaiProjectEvaluationEventflow(in, &v48)
					out.EventFlow = append(out.EventFlow, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation11(out *jwriter.Writer, in SummaryEventFlow) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.EventFlow) != 0 {
		const prefix string = ",\"event_flow\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v49, v50 := range in.EventFlow {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjson679db3deEncodeGithubComRaiProjectEvaluationEventflow(out, v50)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryEventFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryEventFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryEventFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryEventFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation11(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluationEventflow(in *jlexer.Lexer, out *eventflow.Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EVENT_ID":
			out.ID = string(in.String())
		case "PARENT_ID":
			out.ParentID = string(in.String())
		case "EVENT_NAME":
			out.Name = string(in.String())
		case "META":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MetaData = make(map[string]string)
				} else {
					out.MetaData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 string
					v51 = string(in.String())
					(out.MetaData)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		case "TS":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStamp).UnmarshalJSON(data))
			}
		case "ELAPSED_MS":
			out.Duration = uint64(in.Uint64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluationEventflow(out *jwriter.Writer, in eventflow.Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"EVENT_ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"PARENT_ID\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"EVENT_NAME\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if len(in.MetaData) != 0 {
		const prefix string = ",\"META\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v52First := true
			for v52Name, v52Value := range in.MetaData {
				if v52First {
					v52First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v52Name))
				out.RawByte(':')
				out.String(string(v52Value))
			}
			out.RawByte('}')
		}
	}
	if true {
		const prefix string = ",\"TS\":"
		out.RawString(prefix)
		out.Raw((in.TimeStamp).MarshalJSON())
	}
	if in.Duration != 0 {
		const prefix string = ",\"ELAPSED_MS\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Duration))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation12(in *jlexer.Lexer, out *SummaryBase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "model_name":
			out.ModelName = string(in.String())
		case "model_version":
			out.ModelVersion = string(in.String())
		case "framework_name":
			out.FrameworkName = string(in.String())
		case "framework_version":
			out.FrameworkVersion = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "host_name":
			out.HostName = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation12(out *jwriter.Writer, in SummaryBase) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.ModelName != "" {
		const prefix string = ",\"model_name\":"
		out.RawString(prefix)
		out.String(string(in.ModelName))
	}
	if in.ModelVersion != "" {
		const prefix string = ",\"model_version\":"
		out.RawString(prefix)
		out.String(string(in.ModelVersion))
	}
	if in.FrameworkName != "" {
		const prefix string = ",\"framework_name\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkName))
	}
	if in.FrameworkVersion != "" {
		const prefix string = ",\"framework_version\":"
		out.RawString(prefix)
		out.String(string(in.FrameworkVersion))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		out.RawString(prefix)
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Int(int(in.BatchSize))
	}
	if in.HostName != "" {
		const prefix string = ",\"host_name\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryBase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryBase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryBase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryBase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation12(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation13(in *jlexer.Lexer, out *RuntimeMemoryInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start_alloc":
			out.StartAlloc = int64(in.Int64())
		case "start_heap_alloc":
			out.StartHeapAlloc = int64(in.Int64())
		case "start_heap_sys":
			out.StartHeapSys = int64(in.Int64())
		case "start_total_alloc":
			out.StartTotalAlloc = int64(in.Int64())
		case "finish_alloc":
			out.FinishAlloc = int64(in.Int64())
		case "finish_heap_alloc":
			out.FinishHeapAlloc = int64(in.Int64())
		case "finish_heap_sys":
			out.FinishHeapSys = int64(in.Int64())
		case "finish_total_alloc":
			out.FinishTotalAlloc = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation13(out *jwriter.Writer, in RuntimeMemoryInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartAlloc != 0 {
		const prefix string = ",\"start_alloc\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.StartAlloc))
	}
	if in.StartHeapAlloc != 0 {
		const prefix string = ",\"start_heap_alloc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartHeapAlloc))
	}
	if in.StartHeapSys != 0 {
		const prefix string = ",\"start_heap_sys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartHeapSys))
	}
	if in.StartTotalAlloc != 0 {
		const prefix string = ",\"start_total_alloc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartTotalAlloc))
	}
	if in.FinishAlloc != 0 {
		const prefix string = ",\"finish_alloc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishAlloc))
	}
	if in.FinishHeapAlloc != 0 {
		const prefix string = ",\"finish_heap_alloc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishHeapAlloc))
	}
	if in.FinishHeapSys != 0 {
		const prefix string = ",\"finish_heap_sys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishHeapSys))
	}
	if in.FinishTotalAlloc != 0 {
		const prefix string = ",\"finish_total_alloc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishTotalAlloc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RuntimeMemoryInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RuntimeMemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RuntimeMemoryInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RuntimeMemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation13(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation14(in *jlexer.Lexer, out *Performance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "trace":
			(out.Trace).UnmarshalEasyJSON(in)
		case "trace_level":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TraceLevel).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation14(out *jwriter.Writer, in Performance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"trace\":"
		out.RawString(prefix)
		(in.Trace).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"trace_level\":"
		out.RawString(prefix)
		out.Raw((in.TraceLevel).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Performance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Performance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Performance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Performance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation14(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation15(in *jlexer.Lexer, out *MemoryInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gpu":
			if in.IsNull() {
				in.Skip()
				out.GPU = nil
			} else {
				in.Delim('[')
				if out.GPU == nil {
					if !in.IsDelim(']') {
						out.GPU = make([]GPUMemInformation, 0, 1)
					} else {
						out.GPU = []GPUMemInformation{}
					}
				} else {
					out.GPU = (out.GPU)[:0]
				}
				for !in.IsDelim(']') {
					var v53 GPUMemInformation
					(v53).UnmarshalEasyJSON(in)
					out.GPU = append(out.GPU, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "runtime":
			(out.Runtime).UnmarshalEasyJSON(in)
		case "system":
			(out.System).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation15(out *jwriter.Writer, in MemoryInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.GPU) != 0 {
		const prefix string = ",\"gpu\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v54, v55 := range in.GPU {
				if v54 > 0 {
					out.RawByte(',')
				}
				(v55).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"runtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Runtime).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"system\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.System).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation15(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation16(in *jlexer.Lexer, out *MeanLayerInformations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MeanLayerInformations, 0, 1)
			} else {
				*out = MeanLayerInformations{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v56 MeanLayerInformation
			(v56).UnmarshalEasyJSON(in)
			*out = append(*out, v56)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation16(out *jwriter.Writer, in MeanLayerInformations) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v57, v58 := range in {
			if v57 > 0 {
				out.RawByte(',')
			}
			(v58).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MeanLayerInformations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MeanLayerInformations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MeanLayerInformations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MeanLayerInformations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation16(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation17(in *jlexer.Lexer, out *LayerInformations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(LayerInformations, 0, 1)
			} else {
				*out = LayerInformations{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v59 LayerInformation
			(v59).UnmarshalEasyJSON(in)
			*out = append(*out, v59)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation17(out *jwriter.Writer, in LayerInformations) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v60, v61 := range in {
			if v60 > 0 {
				out.RawByte(',')
			}
			(v61).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v LayerInformations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayerInformations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayerInformations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayerInformations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation17(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation18(in *jlexer.Lexer, out *LayerInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "static_type":
			out.StaticType = string(in.String())
		case "shap":
			out.Shape = string(in.String())
		case "durations":
			if in.IsNull() {
				in.Skip()
				out.Durations = nil
			} else {
				in.Delim('[')
				if out.Durations == nil {
					if !in.IsDelim(']') {
						out.Durations = make([]float64, 0, 8)
					} else {
						out.Durations = []float64{}
					}
				} else {
					out.Durations = (out.Durations)[:0]
				}
				for !in.IsDelim(']') {
					var v62 float64
					v62 = float64(in.Float64())
					out.Durations = append(out.Durations, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allocated_bytes":
			if in.IsNull() {
				in.Skip()
				out.AllocatedBytes = nil
			} else {
				in.Delim('[')
				if out.AllocatedBytes == nil {
					if !in.IsDelim(']') {
						out.AllocatedBytes = make([]int64, 0, 8)
					} else {
						out.AllocatedBytes = []int64{}
					}
				} else {
					out.AllocatedBytes = (out.AllocatedBytes)[:0]
				}
				for !in.IsDelim(']') {
					var v63 int64
					v63 = int64(in.Int64())
					out.AllocatedBytes = append(out.AllocatedBytes, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "host_temp_mem_sizes":
			if in.IsNull() {
				in.Skip()
				out.HostTempMemSizes = nil
			} else {
				in.Delim('[')
				if out.HostTempMemSizes == nil {
					if !in.IsDelim(']') {
						out.HostTempMemSizes = make([]int64, 0, 8)
					} else {
						out.HostTempMemSizes = []int64{}
					}
				} else {
					out.HostTempMemSizes = (out.HostTempMemSizes)[:0]
				}
				for !in.IsDelim(']') {
					var v64 int64
					v64 = int64(in.Int64())
					out.HostTempMemSizes = append(out.HostTempMemSizes, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "device_temp_mem_sizes":
			if in.IsNull() {
				in.Skip()
				out.DeviceTempMemSizes = nil
			} else {
				in.Delim('[')
				if out.DeviceTempMemSizes == nil {
					if !in.IsDelim(']') {
						out.DeviceTempMemSizes = make([]int64, 0, 8)
					} else {
						out.DeviceTempMemSizes = []int64{}
					}
				} else {
					out.DeviceTempMemSizes = (out.DeviceTempMemSizes)[:0]
				}
				for !in.IsDelim(']') {
					var v65 int64
					v65 = int64(in.Int64())
					out.DeviceTempMemSizes = append(out.DeviceTempMemSizes, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation18(out *jwriter.Writer, in LayerInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != 0 {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Index))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.StaticType != "" {
		const prefix string = ",\"static_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StaticType))
	}
	if in.Shape != "" {
		const prefix string = ",\"shap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Shape))
	}
	if len(in.Durations) != 0 {
		const prefix string = ",\"durations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v66, v67 := range in.Durations {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v67))
			}
			out.RawByte(']')
		}
	}
	if len(in.AllocatedBytes) != 0 {
		const prefix string = ",\"allocated_bytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.AllocatedBytes {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v69))
			}
			out.RawByte(']')
		}
	}
	if len(in.HostTempMemSizes) != 0 {
		const prefix string = ",\"host_temp_mem_sizes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.HostTempMemSizes {
				if v70 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v71))
			}
			out.RawByte(']')
		}
	}
	if len(in.DeviceTempMemSizes) != 0 {
		const prefix string = ",\"device_temp_mem_sizes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.DeviceTempMemSizes {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v73))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LayerInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayerInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayerInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayerInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation18(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation19(in *jlexer.Lexer, out *GPUMemInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gpuid":
			out.GPUID = int(in.Int())
		case "start_used":
			out.StartUsed = int64(in.Int64())
		case "start_free":
			out.StartFree = int64(in.Int64())
		case "start_total":
			out.StartTotal = int64(in.Int64())
		case "finish_used":
			out.FinishUsed = int64(in.Int64())
		case "finish_free":
			out.FinishFree = int64(in.Int64())
		case "finish_total":
			out.FinishTotal = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation19(out *jwriter.Writer, in GPUMemInformation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GPUID != 0 {
		const prefix string = ",\"gpuid\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.GPUID))
	}
	if in.StartUsed != 0 {
		const prefix string = ",\"start_used\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartUsed))
	}
	if in.StartFree != 0 {
		const prefix string = ",\"start_free\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartFree))
	}
	if in.StartTotal != 0 {
		const prefix string = ",\"start_total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartTotal))
	}
	if in.FinishUsed != 0 {
		const prefix string = ",\"finish_used\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishUsed))
	}
	if in.FinishFree != 0 {
		const prefix string = ",\"finish_free\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishFree))
	}
	if in.FinishTotal != 0 {
		const prefix string = ",\"finish_total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FinishTotal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GPUMemInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GPUMemInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GPUMemInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GPUMemInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation19(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation20(in *jlexer.Lexer, out *Evaluation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "user_id":
			out.UserID = string(in.String())
		case "run_id":
			out.RunID = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "framework":
			easyjson679db3deDecodeGithubComRaiProjectDlframework(in, &out.Framework)
		case "model":
			easyjson679db3deDecodeGithubComRaiProjectDlframework1(in, &out.Model)
		case "dataset_category":
			out.DatasetCategory = string(in.String())
		case "dataset_name":
			out.DatasetName = string(in.String())
		case "machine_architecture":
			out.MachineArchitecture = string(in.String())
		case "using_gpu":
			out.UsingGPU = bool(in.Bool())
		case "batch_size":
			out.BatchSize = int(in.Int())
		case "gpu_metrics":
			out.GPUMetrics = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "trace_level":
			out.TraceLevel = string(in.String())
		case "model_accuracy_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModelAccuracyID).UnmarshalJSON(data))
			}
		case "input_prediction_ids":
			if in.IsNull() {
				in.Skip()
				out.InputPredictionIDs = nil
			} else {
				in.Delim('[')
				if out.InputPredictionIDs == nil {
					if !in.IsDelim(']') {
						out.InputPredictionIDs = make([]bson.ObjectId, 0, 4)
					} else {
						out.InputPredictionIDs = []bson.ObjectId{}
					}
				} else {
					out.InputPredictionIDs = (out.InputPredictionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v74 bson.ObjectId
					if data := in.Raw(); in.Ok() {
						in.AddError((v74).UnmarshalJSON(data))
					}
					out.InputPredictionIDs = append(out.InputPredictionIDs, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "performance_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PerformanceID).UnmarshalJSON(data))
			}
		case "public":
			out.Public = bool(in.Bool())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]string)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v75 string
					v75 = string(in.String())
					(out.Metadata)[key] = v75
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation20(out *jwriter.Writer, in Evaluation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.RunID != "" {
		const prefix string = ",\"run_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RunID))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"framework\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson679db3deEncodeGithubComRaiProjectDlframework(out, in.Framework)
	}
	if true {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson679db3deEncodeGithubComRaiProjectDlframework1(out, in.Model)
	}
	if in.DatasetCategory != "" {
		const prefix string = ",\"dataset_category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DatasetCategory))
	}
	if in.DatasetName != "" {
		const prefix string = ",\"dataset_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DatasetName))
	}
	if in.MachineArchitecture != "" {
		const prefix string = ",\"machine_architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MachineArchitecture))
	}
	if in.UsingGPU {
		const prefix string = ",\"using_gpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.UsingGPU))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batch_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BatchSize))
	}
	if in.GPUMetrics != "" {
		const prefix string = ",\"gpu_metrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GPUMetrics))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if in.TraceLevel != "" {
		const prefix string = ",\"trace_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TraceLevel))
	}
	if in.ModelAccuracyID != "" {
		const prefix string = ",\"model_accuracy_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModelAccuracyID).MarshalJSON())
	}
	if len(in.InputPredictionIDs) != 0 {
		const prefix string = ",\"input_prediction_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v76, v77 := range in.InputPredictionIDs {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.Raw((v77).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.PerformanceID != "" {
		const prefix string = ",\"performance_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PerformanceID).MarshalJSON())
	}
	if in.Public {
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	if len(in.Metadata) != 0 {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.Metadata {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v78Name))
				out.RawByte(':')
				out.String(string(v78Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Evaluation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson679db3deEncodeGithubComRaiProjectEvaluation20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Evaluation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson679db3deEncodeGithubComRaiProjectEvaluation20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Evaluation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson679db3deDecodeGithubComRaiProjectEvaluation20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Evaluation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson679db3deDecodeGithubComRaiProjectEvaluation20(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectDlframework1(in *jlexer.Lexer, out *dlframework.ModelManifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "framework":
			if in.IsNull() {
				in.Skip()
				out.Framework = nil
			} else {
				if out.Framework == nil {
					out.Framework = new(dlframework.FrameworkManifest)
				}
				easyjson679db3deDecodeGithubComRaiProjectDlframework(in, out.Framework)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Container = make(map[string]*dlframework.ContainerHardware)
				} else {
					out.Container = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v79 *dlframework.ContainerHardware
					if in.IsNull() {
						in.Skip()
						v79 = nil
					} else {
						if v79 == nil {
							v79 = new(dlframework.ContainerHardware)
						}
						easyjson679db3deDecodeGithubComRaiProjectDlframework2(in, v79)
					}
					(out.Container)[key] = v79
					in.WantComma()
				}
				in.Delim('}')
			}
		case "description":
			out.Description = string(in.String())
		case "reference":
			if in.IsNull() {
				in.Skip()
				out.Reference = nil
			} else {
				in.Delim('[')
				if out.Reference == nil {
					if !in.IsDelim(']') {
						out.Reference = make([]string, 0, 4)
					} else {
						out.Reference = []string{}
					}
				} else {
					out.Reference = (out.Reference)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.Reference = append(out.Reference, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "license":
			out.License = string(in.String())
		case "inputs":
			if in.IsNull() {
				in.Skip()
				out.Inputs = nil
			} else {
				in.Delim('[')
				if out.Inputs == nil {
					if !in.IsDelim(']') {
						out.Inputs = make([]*dlframework.ModelManifest_Type, 0, 8)
					} else {
						out.Inputs = []*dlframework.ModelManifest_Type{}
					}
				} else {
					out.Inputs = (out.Inputs)[:0]
				}
				for !in.IsDelim(']') {
					var v81 *dlframework.ModelManifest_Type
					if in.IsNull() {
						in.Skip()
						v81 = nil
					} else {
						if v81 == nil {
							v81 = new(dlframework.ModelManifest_Type)
						}
						easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest(in, v81)
					}
					out.Inputs = append(out.Inputs, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "output":
			if in.IsNull() {
				in.Skip()
				out.Output = nil
			} else {
				if out.Output == nil {
					out.Output = new(dlframework.ModelManifest_Type)
				}
				easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest(in, out.Output)
			}
		case "before_preprocess":
			out.BeforePreprocess = string(in.String())
		case "preprocess":
			out.Preprocess = string(in.String())
		case "after_preprocess":
			out.AfterPreprocess = string(in.String())
		case "before_postprocess":
			out.BeforePostprocess = string(in.String())
		case "postprocess":
			out.Postprocess = string(in.String())
		case "after_postprocess":
			out.AfterPostprocess = string(in.String())
		case "model":
			if in.IsNull() {
				in.Skip()
				out.Model = nil
			} else {
				if out.Model == nil {
					out.Model = new(dlframework.ModelManifest_Model)
				}
				easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest1(in, out.Model)
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(map[string]string)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v82 string
					v82 = string(in.String())
					(out.Attributes)[key] = v82
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hidden":
			out.Hidden = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectDlframework1(out *jwriter.Writer, in dlframework.ModelManifest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Framework != nil {
		const prefix string = ",\"framework\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson679db3deEncodeGithubComRaiProjectDlframework(out, *in.Framework)
	}
	if len(in.Container) != 0 {
		const prefix string = ",\"container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v83First := true
			for v83Name, v83Value := range in.Container {
				if v83First {
					v83First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v83Name))
				out.RawByte(':')
				if v83Value == nil {
					out.RawString("null")
				} else {
					easyjson679db3deEncodeGithubComRaiProjectDlframework2(out, *v83Value)
				}
			}
			out.RawByte('}')
		}
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Reference) != 0 {
		const prefix string = ",\"reference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v84, v85 := range in.Reference {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.String(string(v85))
			}
			out.RawByte(']')
		}
	}
	if in.License != "" {
		const prefix string = ",\"license\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.License))
	}
	if len(in.Inputs) != 0 {
		const prefix string = ",\"inputs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.Inputs {
				if v86 > 0 {
					out.RawByte(',')
				}
				if v87 == nil {
					out.RawString("null")
				} else {
					easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest(out, *v87)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Output != nil {
		const prefix string = ",\"output\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest(out, *in.Output)
	}
	if in.BeforePreprocess != "" {
		const prefix string = ",\"before_preprocess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BeforePreprocess))
	}
	if in.Preprocess != "" {
		const prefix string = ",\"preprocess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Preprocess))
	}
	if in.AfterPreprocess != "" {
		const prefix string = ",\"after_preprocess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AfterPreprocess))
	}
	if in.BeforePostprocess != "" {
		const prefix string = ",\"before_postprocess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BeforePostprocess))
	}
	if in.Postprocess != "" {
		const prefix string = ",\"postprocess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Postprocess))
	}
	if in.AfterPostprocess != "" {
		const prefix string = ",\"after_postprocess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AfterPostprocess))
	}
	if in.Model != nil {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest1(out, *in.Model)
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v88First := true
			for v88Name, v88Value := range in.Attributes {
				if v88First {
					v88First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v88Name))
				out.RawByte(':')
				out.String(string(v88Value))
			}
			out.RawByte('}')
		}
	}
	if in.Hidden {
		const prefix string = ",\"hidden\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hidden))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest1(in *jlexer.Lexer, out *dlframework.ModelManifest_Model) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base_url":
			out.BaseUrl = string(in.String())
		case "weights_path":
			out.WeightsPath = string(in.String())
		case "graph_path":
			out.GraphPath = string(in.String())
		case "is_archive":
			out.IsArchive = bool(in.Bool())
		case "weights_checksum":
			out.WeightsChecksum = string(in.String())
		case "graph_checksum":
			out.GraphChecksum = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest1(out *jwriter.Writer, in dlframework.ModelManifest_Model) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BaseUrl != "" {
		const prefix string = ",\"base_url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BaseUrl))
	}
	if in.WeightsPath != "" {
		const prefix string = ",\"weights_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WeightsPath))
	}
	if in.GraphPath != "" {
		const prefix string = ",\"graph_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GraphPath))
	}
	if in.IsArchive {
		const prefix string = ",\"is_archive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsArchive))
	}
	if in.WeightsChecksum != "" {
		const prefix string = ",\"weights_checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WeightsChecksum))
	}
	if in.GraphChecksum != "" {
		const prefix string = ",\"graph_checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GraphChecksum))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest(in *jlexer.Lexer, out *dlframework.ModelManifest_Type) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Parameters = make(map[string]*dlframework.ModelManifest_Type_Parameter)
				} else {
					out.Parameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v89 *dlframework.ModelManifest_Type_Parameter
					if in.IsNull() {
						in.Skip()
						v89 = nil
					} else {
						if v89 == nil {
							v89 = new(dlframework.ModelManifest_Type_Parameter)
						}
						easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifestType(in, v89)
					}
					(out.Parameters)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest(out *jwriter.Writer, in dlframework.ModelManifest_Type) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v90First := true
			for v90Name, v90Value := range in.Parameters {
				if v90First {
					v90First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v90Name))
				out.RawByte(':')
				if v90Value == nil {
					out.RawString("null")
				} else {
					easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifestType(out, *v90Value)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifestType(in *jlexer.Lexer, out *dlframework.ModelManifest_Type_Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifestType(out *jwriter.Writer, in dlframework.ModelManifest_Type_Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != "" {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframework2(in *jlexer.Lexer, out *dlframework.ContainerHardware) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gpu":
			out.Gpu = string(in.String())
		case "cpu":
			out.Cpu = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectDlframework2(out *jwriter.Writer, in dlframework.ContainerHardware) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Gpu != "" {
		const prefix string = ",\"gpu\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Gpu))
	}
	if in.Cpu != "" {
		const prefix string = ",\"cpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cpu))
	}
	out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframework(in *jlexer.Lexer, out *dlframework.FrameworkManifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "container":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Container = make(map[string]*dlframework.ContainerHardware)
				} else {
					out.Container = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v91 *dlframework.ContainerHardware
					if in.IsNull() {
						in.Skip()
						v91 = nil
					} else {
						if v91 == nil {
							v91 = new(dlframework.ContainerHardware)
						}
						easyjson679db3deDecodeGithubComRaiProjectDlframework2(in, v91)
					}
					(out.Container)[key] = v91
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson679db3deEncodeGithubComRaiProjectDlframework(out *jwriter.Writer, in dlframework.FrameworkManifest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if len(in.Container) != 0 {
		const prefix string = ",\"container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v92First := true
			for v92Name, v92Value := range in.Container {
				if v92First {
					v92First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v92Name))
				out.RawByte(':')
				if v92Value == nil {
					out.RawString("null")
				} else {
					easyjson679db3deEncodeGithubComRaiProjectDlframework2(out, *v92Value)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
