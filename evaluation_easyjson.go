// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  evaluation

import (
  bson "gopkg.in/mgo.v2/bson"
  dlframework "github.com/rai-project/dlframework"
  easyjson "github.com/mailru/easyjson"
  eventflow "github.com/rai-project/evaluation/eventflow"
  jlexer "github.com/mailru/easyjson/jlexer"
  json "encoding/json"
  json1 "github.com/uber/jaeger/model/json"
  jwriter "github.com/mailru/easyjson/jwriter"
  orderedmap "github.com/iancoleman/orderedmap"
  tracer "github.com/rai-project/tracer"
)

// suppress unused package warning
var (
   _ *json.RawMessage
   _ *jlexer.Lexer
   _ *jwriter.Writer
   _ easyjson.Marshaler
)

func easyjson679db3deDecodeGithubComRaiProjectEvaluation(in *jlexer.Lexer, out *structuredError) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "code":
      out.Code = int(in.Int())
    case "msg":
      out.Msg = string(in.String())
    case "traceID":
      out.TraceID = json1.TraceID(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation(out *jwriter.Writer, in structuredError) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Code != 0 {
    const prefix string = ",\"code\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Code))
  }
  if in.Msg != "" {
    const prefix string = ",\"msg\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Msg))
  }
  if in.TraceID != "" {
    const prefix string = ",\"traceID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TraceID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v structuredError) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v structuredError) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *structuredError) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *structuredError) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation1(in *jlexer.Lexer, out *layerInformationMap) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  out.OrderedMap = new(orderedmap.OrderedMap)
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation1(out *jwriter.Writer, in layerInformationMap) {
  out.RawByte('{')
  first := true
  _ = first
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v layerInformationMap) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation1(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v layerInformationMap) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation1(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *layerInformationMap) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation1(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *layerInformationMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation1(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation2(in *jlexer.Lexer, out *TraceInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "data":
      if in.IsNull() {
        in.Skip()
        out.Traces = nil
      } else {
        in.Delim('[')
        if out.Traces == nil {
          if !in.IsDelim(']') {
            out.Traces = make([]json1.Trace, 0, 1)
          } else {
            out.Traces = []json1.Trace{}
          }
        } else { 
          out.Traces = (out.Traces)[:0]
        }
        for !in.IsDelim(']') {
          var v1 json1.Trace
          easyjson679db3deDecodeGithubComUberJaegerModelJson(in, &v1)
          out.Traces = append(out.Traces, v1)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "total":
      out.Total = int(in.Int())
    case "limit":
      out.Limit = int(in.Int())
    case "offset":
      out.Offset = int(in.Int())
    case "errors":
      if in.IsNull() {
        in.Skip()
        out.Errors = nil
      } else {
        in.Delim('[')
        if out.Errors == nil {
          if !in.IsDelim(']') {
            out.Errors = make([]structuredError, 0, 1)
          } else {
            out.Errors = []structuredError{}
          }
        } else { 
          out.Errors = (out.Errors)[:0]
        }
        for !in.IsDelim(']') {
          var v2 structuredError
          (v2).UnmarshalEasyJSON(in)
          out.Errors = append(out.Errors, v2)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation2(out *jwriter.Writer, in TraceInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.Traces) != 0 {
    const prefix string = ",\"data\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v3, v4 := range in.Traces {
        if v3 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson(out, v4)
      }
      out.RawByte(']')
    }
  }
  if in.Total != 0 {
    const prefix string = ",\"total\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Total))
  }
  if in.Limit != 0 {
    const prefix string = ",\"limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Limit))
  }
  if in.Offset != 0 {
    const prefix string = ",\"offset\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Offset))
  }
  if len(in.Errors) != 0 {
    const prefix string = ",\"errors\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v5, v6 := range in.Errors {
        if v5 > 0 {
          out.RawByte(',')
        }
        (v6).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v TraceInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation2(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation2(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation2(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation2(l, v)
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson(in *jlexer.Lexer, out *json1.Trace) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "traceID":
      out.TraceID = json1.TraceID(in.String())
    case "spans":
      if in.IsNull() {
        in.Skip()
        out.Spans = nil
      } else {
        in.Delim('[')
        if out.Spans == nil {
          if !in.IsDelim(']') {
            out.Spans = make([]json1.Span, 0, 1)
          } else {
            out.Spans = []json1.Span{}
          }
        } else { 
          out.Spans = (out.Spans)[:0]
        }
        for !in.IsDelim(']') {
          var v7 json1.Span
          easyjson679db3deDecodeGithubComUberJaegerModelJson1(in, &v7)
          out.Spans = append(out.Spans, v7)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "processes":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Processes = make(map[json1.ProcessID]json1.Process)
        } else {
        out.Processes = nil
        }
        for !in.IsDelim('}') {
          key := json1.ProcessID(in.String())
          in.WantColon()
          var v8 json1.Process
          easyjson679db3deDecodeGithubComUberJaegerModelJson2(in, &v8)
          (out.Processes)[key] = v8
          in.WantComma()
        }
        in.Delim('}')
      }
    case "warnings":
      if in.IsNull() {
        in.Skip()
        out.Warnings = nil
      } else {
        in.Delim('[')
        if out.Warnings == nil {
          if !in.IsDelim(']') {
            out.Warnings = make([]string, 0, 4)
          } else {
            out.Warnings = []string{}
          }
        } else { 
          out.Warnings = (out.Warnings)[:0]
        }
        for !in.IsDelim(']') {
          var v9 string
          v9 = string(in.String())
          out.Warnings = append(out.Warnings, v9)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson(out *jwriter.Writer, in json1.Trace) {
  out.RawByte('{')
  first := true
  _ = first
  if in.TraceID != "" {
    const prefix string = ",\"traceID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TraceID))
  }
  if len(in.Spans) != 0 {
    const prefix string = ",\"spans\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v10, v11 := range in.Spans {
        if v10 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson1(out, v11)
      }
      out.RawByte(']')
    }
  }
  if len(in.Processes) != 0 {
    const prefix string = ",\"processes\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v12First := true
      for v12Name, v12Value := range in.Processes {
        if v12First { v12First = false } else { out.RawByte(',') }
        out.String(string(v12Name))
        out.RawByte(':')
        easyjson679db3deEncodeGithubComUberJaegerModelJson2(out, v12Value)
      }
      out.RawByte('}')
    }
  }
  if len(in.Warnings) != 0 {
    const prefix string = ",\"warnings\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v13, v14 := range in.Warnings {
        if v13 > 0 {
          out.RawByte(',')
        }
        out.String(string(v14))
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson2(in *jlexer.Lexer, out *json1.Process) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "serviceName":
      out.ServiceName = string(in.String())
    case "tags":
      if in.IsNull() {
        in.Skip()
        out.Tags = nil
      } else {
        in.Delim('[')
        if out.Tags == nil {
          if !in.IsDelim(']') {
            out.Tags = make([]json1.KeyValue, 0, 1)
          } else {
            out.Tags = []json1.KeyValue{}
          }
        } else { 
          out.Tags = (out.Tags)[:0]
        }
        for !in.IsDelim(']') {
          var v15 json1.KeyValue
          easyjson679db3deDecodeGithubComUberJaegerModelJson3(in, &v15)
          out.Tags = append(out.Tags, v15)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson2(out *jwriter.Writer, in json1.Process) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ServiceName != "" {
    const prefix string = ",\"serviceName\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ServiceName))
  }
  if len(in.Tags) != 0 {
    const prefix string = ",\"tags\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v16, v17 := range in.Tags {
        if v16 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson3(out, v17)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson3(in *jlexer.Lexer, out *json1.KeyValue) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "key":
      out.Key = string(in.String())
    case "type":
      out.Type = json1.ValueType(in.String())
    case "value":
      if m, ok := out.Value.(easyjson.Unmarshaler); ok {
      m.UnmarshalEasyJSON(in)
      } else if m, ok := out.Value.(json.Unmarshaler); ok {
      _ = m.UnmarshalJSON(in.Raw())
      } else {
        out.Value = in.Interface()
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson3(out *jwriter.Writer, in json1.KeyValue) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Key != "" {
    const prefix string = ",\"key\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Key))
  }
  if in.Type != "" {
    const prefix string = ",\"type\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Type))
  }
  if in.Value != nil {
    const prefix string = ",\"value\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if m, ok := in.Value.(easyjson.Marshaler); ok {
      m.MarshalEasyJSON(out)
    } else if m, ok := in.Value.(json.Marshaler); ok {
      out.Raw(m.MarshalJSON())
    } else {
      out.Raw(json.Marshal(in.Value))
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson1(in *jlexer.Lexer, out *json1.Span) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "traceID":
      out.TraceID = json1.TraceID(in.String())
    case "spanID":
      out.SpanID = json1.SpanID(in.String())
    case "parentSpanID":
      out.ParentSpanID = json1.SpanID(in.String())
    case "flags":
      out.Flags = uint32(in.Uint32())
    case "operationName":
      out.OperationName = string(in.String())
    case "references":
      if in.IsNull() {
        in.Skip()
        out.References = nil
      } else {
        in.Delim('[')
        if out.References == nil {
          if !in.IsDelim(']') {
            out.References = make([]json1.Reference, 0, 1)
          } else {
            out.References = []json1.Reference{}
          }
        } else { 
          out.References = (out.References)[:0]
        }
        for !in.IsDelim(']') {
          var v18 json1.Reference
          easyjson679db3deDecodeGithubComUberJaegerModelJson4(in, &v18)
          out.References = append(out.References, v18)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "startTime":
      out.StartTime = uint64(in.Uint64())
    case "duration":
      out.Duration = uint64(in.Uint64())
    case "tags":
      if in.IsNull() {
        in.Skip()
        out.Tags = nil
      } else {
        in.Delim('[')
        if out.Tags == nil {
          if !in.IsDelim(']') {
            out.Tags = make([]json1.KeyValue, 0, 1)
          } else {
            out.Tags = []json1.KeyValue{}
          }
        } else { 
          out.Tags = (out.Tags)[:0]
        }
        for !in.IsDelim(']') {
          var v19 json1.KeyValue
          easyjson679db3deDecodeGithubComUberJaegerModelJson3(in, &v19)
          out.Tags = append(out.Tags, v19)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "logs":
      if in.IsNull() {
        in.Skip()
        out.Logs = nil
      } else {
        in.Delim('[')
        if out.Logs == nil {
          if !in.IsDelim(']') {
            out.Logs = make([]json1.Log, 0, 2)
          } else {
            out.Logs = []json1.Log{}
          }
        } else { 
          out.Logs = (out.Logs)[:0]
        }
        for !in.IsDelim(']') {
          var v20 json1.Log
          easyjson679db3deDecodeGithubComUberJaegerModelJson5(in, &v20)
          out.Logs = append(out.Logs, v20)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "processID":
      out.ProcessID = json1.ProcessID(in.String())
    case "process":
      if in.IsNull() {
        in.Skip()
        out.Process = nil
      } else {
        if out.Process == nil {
          out.Process = new(json1.Process)
        }
        easyjson679db3deDecodeGithubComUberJaegerModelJson2(in, &*out.Process)
      }
    case "warnings":
      if in.IsNull() {
        in.Skip()
        out.Warnings = nil
      } else {
        in.Delim('[')
        if out.Warnings == nil {
          if !in.IsDelim(']') {
            out.Warnings = make([]string, 0, 4)
          } else {
            out.Warnings = []string{}
          }
        } else { 
          out.Warnings = (out.Warnings)[:0]
        }
        for !in.IsDelim(']') {
          var v21 string
          v21 = string(in.String())
          out.Warnings = append(out.Warnings, v21)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson1(out *jwriter.Writer, in json1.Span) {
  out.RawByte('{')
  first := true
  _ = first
  if in.TraceID != "" {
    const prefix string = ",\"traceID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TraceID))
  }
  if in.SpanID != "" {
    const prefix string = ",\"spanID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.SpanID))
  }
  if in.ParentSpanID != "" {
    const prefix string = ",\"parentSpanID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ParentSpanID))
  }
  if in.Flags != 0 {
    const prefix string = ",\"flags\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Uint32(uint32(in.Flags))
  }
  if in.OperationName != "" {
    const prefix string = ",\"operationName\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.OperationName))
  }
  if len(in.References) != 0 {
    const prefix string = ",\"references\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v22, v23 := range in.References {
        if v22 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson4(out, v23)
      }
      out.RawByte(']')
    }
  }
  if in.StartTime != 0 {
    const prefix string = ",\"startTime\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Uint64(uint64(in.StartTime))
  }
  if in.Duration != 0 {
    const prefix string = ",\"duration\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Uint64(uint64(in.Duration))
  }
  if len(in.Tags) != 0 {
    const prefix string = ",\"tags\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v24, v25 := range in.Tags {
        if v24 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson3(out, v25)
      }
      out.RawByte(']')
    }
  }
  if len(in.Logs) != 0 {
    const prefix string = ",\"logs\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v26, v27 := range in.Logs {
        if v26 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson5(out, v27)
      }
      out.RawByte(']')
    }
  }
  if in.ProcessID != "" {
    const prefix string = ",\"processID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ProcessID))
  }
  if in.Process != nil {
    const prefix string = ",\"process\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      easyjson679db3deEncodeGithubComUberJaegerModelJson2(out, *in.Process)
  }
  if len(in.Warnings) != 0 {
    const prefix string = ",\"warnings\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v28, v29 := range in.Warnings {
        if v28 > 0 {
          out.RawByte(',')
        }
        out.String(string(v29))
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson5(in *jlexer.Lexer, out *json1.Log) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "timestamp":
      out.Timestamp = uint64(in.Uint64())
    case "fields":
      if in.IsNull() {
        in.Skip()
        out.Fields = nil
      } else {
        in.Delim('[')
        if out.Fields == nil {
          if !in.IsDelim(']') {
            out.Fields = make([]json1.KeyValue, 0, 1)
          } else {
            out.Fields = []json1.KeyValue{}
          }
        } else { 
          out.Fields = (out.Fields)[:0]
        }
        for !in.IsDelim(']') {
          var v30 json1.KeyValue
          easyjson679db3deDecodeGithubComUberJaegerModelJson3(in, &v30)
          out.Fields = append(out.Fields, v30)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson5(out *jwriter.Writer, in json1.Log) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Timestamp != 0 {
    const prefix string = ",\"timestamp\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Uint64(uint64(in.Timestamp))
  }
  if len(in.Fields) != 0 {
    const prefix string = ",\"fields\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v31, v32 := range in.Fields {
        if v31 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComUberJaegerModelJson3(out, v32)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComUberJaegerModelJson4(in *jlexer.Lexer, out *json1.Reference) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "refType":
      out.RefType = json1.ReferenceType(in.String())
    case "traceID":
      out.TraceID = json1.TraceID(in.String())
    case "spanID":
      out.SpanID = json1.SpanID(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComUberJaegerModelJson4(out *jwriter.Writer, in json1.Reference) {
  out.RawByte('{')
  first := true
  _ = first
  if in.RefType != "" {
    const prefix string = ",\"refType\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RefType))
  }
  if in.TraceID != "" {
    const prefix string = ",\"traceID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TraceID))
  }
  if in.SpanID != "" {
    const prefix string = ",\"spanID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.SpanID))
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation3(in *jlexer.Lexer, out *SystemMemoryInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "start_available":
      out.StartAvailable = int64(in.Int64())
    case "start_free":
      out.StartFree = int64(in.Int64())
    case "start_total":
      out.StartTotal = int64(in.Int64())
    case "finish_available":
      out.FinishAvailable = int64(in.Int64())
    case "finish_free":
      out.FinishFree = int64(in.Int64())
    case "finish_total":
      out.FinishTotal = int64(in.Int64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation3(out *jwriter.Writer, in SystemMemoryInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.StartAvailable != 0 {
    const prefix string = ",\"start_available\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartAvailable))
  }
  if in.StartFree != 0 {
    const prefix string = ",\"start_free\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartFree))
  }
  if in.StartTotal != 0 {
    const prefix string = ",\"start_total\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartTotal))
  }
  if in.FinishAvailable != 0 {
    const prefix string = ",\"finish_available\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishAvailable))
  }
  if in.FinishFree != 0 {
    const prefix string = ",\"finish_free\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishFree))
  }
  if in.FinishTotal != 0 {
    const prefix string = ",\"finish_total\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishTotal))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SystemMemoryInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation3(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemMemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation3(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemMemoryInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation3(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemMemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation3(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation4(in *jlexer.Lexer, out *SummaryThroughputLatency) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "durations":
      if in.IsNull() {
        in.Skip()
        out.Durations = nil
      } else {
        in.Delim('[')
        if out.Durations == nil {
          if !in.IsDelim(']') {
            out.Durations = make([]float64, 0, 8)
          } else {
            out.Durations = []float64{}
          }
        } else { 
          out.Durations = (out.Durations)[:0]
        }
        for !in.IsDelim(']') {
          var v33 float64
          v33 = float64(in.Float64())
          out.Durations = append(out.Durations, v33)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "duration":
      out.Duration = float64(in.Float64())
    case "latency":
      out.Latency = float64(in.Float64())
    case "throughput":
      out.Throughput = float64(in.Float64())
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation4(out *jwriter.Writer, in SummaryThroughputLatency) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.Durations) != 0 {
    const prefix string = ",\"durations\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v34, v35 := range in.Durations {
        if v34 > 0 {
          out.RawByte(',')
        }
        out.Float64(float64(v35))
      }
      out.RawByte(']')
    }
  }
  if in.Duration != 0 {
    const prefix string = ",\"duration\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Duration))
  }
  if in.Latency != 0 {
    const prefix string = ",\"latency\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Latency))
  }
  if in.Throughput != 0 {
    const prefix string = ",\"throughput\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Throughput))
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryThroughputLatency) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation4(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryThroughputLatency) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation4(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryThroughputLatency) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation4(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryThroughputLatency) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation4(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation5(in *jlexer.Lexer, out *SummaryThroughputLatencies) {
 isTopLevel := in.IsStart()
  if in.IsNull() {
    in.Skip()
    *out = nil
  } else {
    in.Delim('[')
    if *out == nil {
      if !in.IsDelim(']') {
        *out = make(SummaryThroughputLatencies, 0, 1)
      } else {
        *out = SummaryThroughputLatencies{}
      }
    } else { 
      *out = (*out)[:0]
    }
    for !in.IsDelim(']') {
      var v36 SummaryThroughputLatency
      (v36).UnmarshalEasyJSON(in)
      *out = append(*out, v36)
      in.WantComma()
    }
    in.Delim(']')
  }
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation5(out *jwriter.Writer, in SummaryThroughputLatencies) {
  if in == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
    out.RawString("null")
  } else {
    out.RawByte('[')
    for v37, v38 := range in {
      if v37 > 0 {
        out.RawByte(',')
      }
      (v38).MarshalEasyJSON(out)
    }
    out.RawByte(']')
  }
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryThroughputLatencies) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation5(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryThroughputLatencies) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation5(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryThroughputLatencies) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation5(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryThroughputLatencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation5(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation6(in *jlexer.Lexer, out *SummaryPredictDurationInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "durations":
      if in.IsNull() {
        in.Skip()
        out.Durations = nil
      } else {
        in.Delim('[')
        if out.Durations == nil {
          if !in.IsDelim(']') {
            out.Durations = make([]uint64, 0, 8)
          } else {
            out.Durations = []uint64{}
          }
        } else { 
          out.Durations = (out.Durations)[:0]
        }
        for !in.IsDelim(']') {
          var v39 uint64
          v39 = uint64(in.Uint64())
          out.Durations = append(out.Durations, v39)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation6(out *jwriter.Writer, in SummaryPredictDurationInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.Durations) != 0 {
    const prefix string = ",\"durations\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v40, v41 := range in.Durations {
        if v40 > 0 {
          out.RawByte(',')
        }
        out.Uint64(uint64(v41))
      }
      out.RawByte(']')
    }
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryPredictDurationInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation6(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryPredictDurationInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation6(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryPredictDurationInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation6(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryPredictDurationInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation6(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation7(in *jlexer.Lexer, out *SummaryPredictAccuracyInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "top1_accuracy":
      out.Top1Accuracy = float64(in.Float64())
    case "top5_accuracy":
      out.Top5Accuracy = float64(in.Float64())
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation7(out *jwriter.Writer, in SummaryPredictAccuracyInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Top1Accuracy != 0 {
    const prefix string = ",\"top1_accuracy\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Top1Accuracy))
  }
  if in.Top5Accuracy != 0 {
    const prefix string = ",\"top5_accuracy\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Top5Accuracy))
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryPredictAccuracyInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation7(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryPredictAccuracyInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation7(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryPredictAccuracyInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation7(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryPredictAccuracyInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation7(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation8(in *jlexer.Lexer, out *SummaryMemoryInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "memory_informations":
      if in.IsNull() {
        in.Skip()
        out.MemoryInformations = nil
      } else {
        in.Delim('[')
        if out.MemoryInformations == nil {
          if !in.IsDelim(']') {
            out.MemoryInformations = make([]MemoryInformation, 0, 1)
          } else {
            out.MemoryInformations = []MemoryInformation{}
          }
        } else { 
          out.MemoryInformations = (out.MemoryInformations)[:0]
        }
        for !in.IsDelim(']') {
          var v42 MemoryInformation
          (v42).UnmarshalEasyJSON(in)
          out.MemoryInformations = append(out.MemoryInformations, v42)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation8(out *jwriter.Writer, in SummaryMemoryInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.MemoryInformations) != 0 {
    const prefix string = ",\"memory_informations\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v43, v44 := range in.MemoryInformations {
        if v43 > 0 {
          out.RawByte(',')
        }
        (v44).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryMemoryInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation8(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryMemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation8(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryMemoryInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation8(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryMemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation8(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation9(in *jlexer.Lexer, out *SummaryLayerInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "layer_informations":
      (out.LayerInformations).UnmarshalEasyJSON(in)
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation9(out *jwriter.Writer, in SummaryLayerInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.LayerInformations) != 0 {
    const prefix string = ",\"layer_informations\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.LayerInformations).MarshalEasyJSON(out)
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryLayerInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation9(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryLayerInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation9(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryLayerInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation9(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryLayerInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation9(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation10(in *jlexer.Lexer, out *SummaryEventFlow) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "event_flow":
      if in.IsNull() {
        in.Skip()
        out.EventFlow = nil
      } else {
        in.Delim('[')
        if out.EventFlow == nil {
          if !in.IsDelim(']') {
            out.EventFlow = make(eventflow.Events, 0, 1)
          } else {
            out.EventFlow = eventflow.Events{}
          }
        } else { 
          out.EventFlow = (out.EventFlow)[:0]
        }
        for !in.IsDelim(']') {
          var v45 eventflow.Event
          easyjson679db3deDecodeGithubComRaiProjectEvaluationEventflow(in, &v45)
          out.EventFlow = append(out.EventFlow, v45)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation10(out *jwriter.Writer, in SummaryEventFlow) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.EventFlow) != 0 {
    const prefix string = ",\"event_flow\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v46, v47 := range in.EventFlow {
        if v46 > 0 {
          out.RawByte(',')
        }
        easyjson679db3deEncodeGithubComRaiProjectEvaluationEventflow(out, v47)
      }
      out.RawByte(']')
    }
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryEventFlow) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation10(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryEventFlow) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation10(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryEventFlow) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation10(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryEventFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation10(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluationEventflow(in *jlexer.Lexer, out *eventflow.Event) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "EVENT_ID":
      out.ID = string(in.String())
    case "PARENT_ID":
      out.ParentID = string(in.String())
    case "EVENT_NAME":
      out.Name = string(in.String())
    case "META":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.MetaData = make(map[string]string)
        } else {
        out.MetaData = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v48 string
          v48 = string(in.String())
          (out.MetaData)[key] = v48
          in.WantComma()
        }
        in.Delim('}')
      }
    case "TS":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.TimeStamp).UnmarshalJSON(data) )
      }
    case "ELAPSED_MS":
      out.Duration = uint64(in.Uint64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluationEventflow(out *jwriter.Writer, in eventflow.Event) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"EVENT_ID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  if in.ParentID != "" {
    const prefix string = ",\"PARENT_ID\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ParentID))
  }
  if in.Name != "" {
    const prefix string = ",\"EVENT_NAME\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if len(in.MetaData) != 0 {
    const prefix string = ",\"META\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v49First := true
      for v49Name, v49Value := range in.MetaData {
        if v49First { v49First = false } else { out.RawByte(',') }
        out.String(string(v49Name))
        out.RawByte(':')
        out.String(string(v49Value))
      }
      out.RawByte('}')
    }
  }
  if true {
    const prefix string = ",\"TS\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.TimeStamp).MarshalJSON() )
  }
  if in.Duration != 0 {
    const prefix string = ",\"ELAPSED_MS\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Uint64(uint64(in.Duration))
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation11(in *jlexer.Lexer, out *SummaryCUDALaunchInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "kernel_launch_information":
      if in.IsNull() {
        in.Skip()
        out.KernelLaunchInformations = nil
      } else {
        in.Delim('[')
        if out.KernelLaunchInformations == nil {
          if !in.IsDelim(']') {
            out.KernelLaunchInformations = make(KernelLaunchInformations, 0, 1)
          } else {
            out.KernelLaunchInformations = KernelLaunchInformations{}
          }
        } else { 
          out.KernelLaunchInformations = (out.KernelLaunchInformations)[:0]
        }
        for !in.IsDelim(']') {
          var v50 KernelLaunchInformation
          (v50).UnmarshalEasyJSON(in)
          out.KernelLaunchInformations = append(out.KernelLaunchInformations, v50)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation11(out *jwriter.Writer, in SummaryCUDALaunchInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.KernelLaunchInformations) != 0 {
    const prefix string = ",\"kernel_launch_information\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v51, v52 := range in.KernelLaunchInformations {
        if v51 > 0 {
          out.RawByte(',')
        }
        (v52).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryCUDALaunchInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation11(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryCUDALaunchInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation11(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryCUDALaunchInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation11(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryCUDALaunchInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation11(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation12(in *jlexer.Lexer, out *SummaryBase) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "model_name":
      out.ModelName = string(in.String())
    case "model_version":
      out.ModelVersion = string(in.String())
    case "framework_name":
      out.FrameworkName = string(in.String())
    case "framework_version":
      out.FrameworkVersion = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "host_name":
      out.HostName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation12(out *jwriter.Writer, in SummaryBase) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  if in.ModelName != "" {
    const prefix string = ",\"model_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelName))
  }
  if in.ModelVersion != "" {
    const prefix string = ",\"model_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ModelVersion))
  }
  if in.FrameworkName != "" {
    const prefix string = ",\"framework_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkName))
  }
  if in.FrameworkVersion != "" {
    const prefix string = ",\"framework_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FrameworkVersion))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.HostName != "" {
    const prefix string = ",\"host_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.HostName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SummaryBase) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation12(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryBase) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation12(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryBase) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation12(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryBase) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation12(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation13(in *jlexer.Lexer, out *RuntimeMemoryInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "start_alloc":
      out.StartAlloc = int64(in.Int64())
    case "start_heap_alloc":
      out.StartHeapAlloc = int64(in.Int64())
    case "start_heap_sys":
      out.StartHeapSys = int64(in.Int64())
    case "start_total_alloc":
      out.StartTotalAlloc = int64(in.Int64())
    case "finish_alloc":
      out.FinishAlloc = int64(in.Int64())
    case "finish_heap_alloc":
      out.FinishHeapAlloc = int64(in.Int64())
    case "finish_heap_sys":
      out.FinishHeapSys = int64(in.Int64())
    case "finish_total_alloc":
      out.FinishTotalAlloc = int64(in.Int64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation13(out *jwriter.Writer, in RuntimeMemoryInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.StartAlloc != 0 {
    const prefix string = ",\"start_alloc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartAlloc))
  }
  if in.StartHeapAlloc != 0 {
    const prefix string = ",\"start_heap_alloc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartHeapAlloc))
  }
  if in.StartHeapSys != 0 {
    const prefix string = ",\"start_heap_sys\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartHeapSys))
  }
  if in.StartTotalAlloc != 0 {
    const prefix string = ",\"start_total_alloc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartTotalAlloc))
  }
  if in.FinishAlloc != 0 {
    const prefix string = ",\"finish_alloc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishAlloc))
  }
  if in.FinishHeapAlloc != 0 {
    const prefix string = ",\"finish_heap_alloc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishHeapAlloc))
  }
  if in.FinishHeapSys != 0 {
    const prefix string = ",\"finish_heap_sys\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishHeapSys))
  }
  if in.FinishTotalAlloc != 0 {
    const prefix string = ",\"finish_total_alloc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishTotalAlloc))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v RuntimeMemoryInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation13(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RuntimeMemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation13(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *RuntimeMemoryInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation13(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RuntimeMemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation13(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation14(in *jlexer.Lexer, out *Performance) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "trace":
      (out.Trace).UnmarshalEasyJSON(in)
    case "trace_level":
      out.TraceLevel = tracer.Level(in.Int32())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation14(out *jwriter.Writer, in Performance) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"trace\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Trace).MarshalEasyJSON(out)
  }
  if in.TraceLevel != 0 {
    const prefix string = ",\"trace_level\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int32(int32(in.TraceLevel))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Performance) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation14(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Performance) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation14(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Performance) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation14(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Performance) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation14(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation15(in *jlexer.Lexer, out *ModelAccuracy) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "top1":
      out.Top1 = float64(in.Float64())
    case "top5":
      out.Top5 = float64(in.Float64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation15(out *jwriter.Writer, in ModelAccuracy) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if in.Top1 != 0 {
    const prefix string = ",\"top1\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Top1))
  }
  if in.Top5 != 0 {
    const prefix string = ",\"top5\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Top5))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v ModelAccuracy) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation15(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModelAccuracy) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation15(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModelAccuracy) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation15(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModelAccuracy) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation15(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation16(in *jlexer.Lexer, out *MemoryInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "gpu":
      if in.IsNull() {
        in.Skip()
        out.GPU = nil
      } else {
        in.Delim('[')
        if out.GPU == nil {
          if !in.IsDelim(']') {
            out.GPU = make([]GPUMemInformation, 0, 1)
          } else {
            out.GPU = []GPUMemInformation{}
          }
        } else { 
          out.GPU = (out.GPU)[:0]
        }
        for !in.IsDelim(']') {
          var v53 GPUMemInformation
          (v53).UnmarshalEasyJSON(in)
          out.GPU = append(out.GPU, v53)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "runtime":
      (out.Runtime).UnmarshalEasyJSON(in)
    case "system":
      (out.System).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation16(out *jwriter.Writer, in MemoryInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.GPU) != 0 {
    const prefix string = ",\"gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v54, v55 := range in.GPU {
        if v54 > 0 {
          out.RawByte(',')
        }
        (v55).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  if true {
    const prefix string = ",\"runtime\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Runtime).MarshalEasyJSON(out)
  }
  if true {
    const prefix string = ",\"system\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.System).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v MemoryInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation16(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation16(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation16(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation16(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation17(in *jlexer.Lexer, out *LayerInformations) {
 isTopLevel := in.IsStart()
  if in.IsNull() {
    in.Skip()
    *out = nil
  } else {
    in.Delim('[')
    if *out == nil {
      if !in.IsDelim(']') {
        *out = make(LayerInformations, 0, 1)
      } else {
        *out = LayerInformations{}
      }
    } else { 
      *out = (*out)[:0]
    }
    for !in.IsDelim(']') {
      var v56 LayerInformation
      (v56).UnmarshalEasyJSON(in)
      *out = append(*out, v56)
      in.WantComma()
    }
    in.Delim(']')
  }
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation17(out *jwriter.Writer, in LayerInformations) {
  if in == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
    out.RawString("null")
  } else {
    out.RawByte('[')
    for v57, v58 := range in {
      if v57 > 0 {
        out.RawByte(',')
      }
      (v58).MarshalEasyJSON(out)
    }
    out.RawByte(']')
  }
}
// MarshalJSON supports json.Marshaler interface
func (v LayerInformations) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation17(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayerInformations) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation17(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayerInformations) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation17(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayerInformations) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation17(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation18(in *jlexer.Lexer, out *LayerInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "name":
      out.Name = string(in.String())
    case "durations":
      if in.IsNull() {
        in.Skip()
        out.Durations = nil
      } else {
        in.Delim('[')
        if out.Durations == nil {
          if !in.IsDelim(']') {
            out.Durations = make([]float64, 0, 8)
          } else {
            out.Durations = []float64{}
          }
        } else { 
          out.Durations = (out.Durations)[:0]
        }
        for !in.IsDelim(']') {
          var v59 float64
          v59 = float64(in.Float64())
          out.Durations = append(out.Durations, v59)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation18(out *jwriter.Writer, in LayerInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if len(in.Durations) != 0 {
    const prefix string = ",\"durations\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v60, v61 := range in.Durations {
        if v60 > 0 {
          out.RawByte(',')
        }
        out.Float64(float64(v61))
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v LayerInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation18(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayerInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation18(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayerInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation18(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayerInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation18(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation19(in *jlexer.Lexer, out *KernelLaunchInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "name":
      out.Name = string(in.String())
    case "tags":
      if in.IsNull() {
        in.Skip()
        out.Tags = nil
      } else {
        in.Delim('[')
        if out.Tags == nil {
          if !in.IsDelim(']') {
            out.Tags = make([]Metadata, 0, 8)
          } else {
            out.Tags = []Metadata{}
          }
        } else { 
          out.Tags = (out.Tags)[:0]
        }
        for !in.IsDelim(']') {
          var v62 Metadata
          if in.IsNull() {
            in.Skip()
          } else {
            in.Delim('{')
            if !in.IsDelim('}') {
            v62 = make(Metadata)
            } else {
            v62 = nil
            }
            for !in.IsDelim('}') {
              key := string(in.String())
              in.WantColon()
              var v63 interface {}
              if m, ok := v63.(easyjson.Unmarshaler); ok {
              m.UnmarshalEasyJSON(in)
              } else if m, ok := v63.(json.Unmarshaler); ok {
              _ = m.UnmarshalJSON(in.Raw())
              } else {
                v63 = in.Interface()
              }
              (v62)[key] = v63
              in.WantComma()
            }
            in.Delim('}')
          }
          out.Tags = append(out.Tags, v62)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "logs":
      if in.IsNull() {
        in.Skip()
        out.Logs = nil
      } else {
        in.Delim('[')
        if out.Logs == nil {
          if !in.IsDelim(']') {
            out.Logs = make([]Metadata, 0, 8)
          } else {
            out.Logs = []Metadata{}
          }
        } else { 
          out.Logs = (out.Logs)[:0]
        }
        for !in.IsDelim(']') {
          var v64 Metadata
          if in.IsNull() {
            in.Skip()
          } else {
            in.Delim('{')
            if !in.IsDelim('}') {
            v64 = make(Metadata)
            } else {
            v64 = nil
            }
            for !in.IsDelim('}') {
              key := string(in.String())
              in.WantColon()
              var v65 interface {}
              if m, ok := v65.(easyjson.Unmarshaler); ok {
              m.UnmarshalEasyJSON(in)
              } else if m, ok := v65.(json.Unmarshaler); ok {
              _ = m.UnmarshalJSON(in.Raw())
              } else {
                v65 = in.Interface()
              }
              (v64)[key] = v65
              in.WantComma()
            }
            in.Delim('}')
          }
          out.Logs = append(out.Logs, v64)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "durations":
      if in.IsNull() {
        in.Skip()
        out.Durations = nil
      } else {
        in.Delim('[')
        if out.Durations == nil {
          if !in.IsDelim(']') {
            out.Durations = make([]float64, 0, 8)
          } else {
            out.Durations = []float64{}
          }
        } else { 
          out.Durations = (out.Durations)[:0]
        }
        for !in.IsDelim(']') {
          var v66 float64
          v66 = float64(in.Float64())
          out.Durations = append(out.Durations, v66)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation19(out *jwriter.Writer, in KernelLaunchInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if len(in.Tags) != 0 {
    const prefix string = ",\"tags\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v67, v68 := range in.Tags {
        if v67 > 0 {
          out.RawByte(',')
        }
        if v68 == nil && (out.Flags & jwriter.NilMapAsEmpty) == 0 {
          out.RawString(`null`)
        } else {
          out.RawByte('{')
          v69First := true
          for v69Name, v69Value := range v68 {
            if v69First { v69First = false } else { out.RawByte(',') }
            out.String(string(v69Name))
            out.RawByte(':')
            if m, ok := v69Value.(easyjson.Marshaler); ok {
              m.MarshalEasyJSON(out)
            } else if m, ok := v69Value.(json.Marshaler); ok {
              out.Raw(m.MarshalJSON())
            } else {
              out.Raw(json.Marshal(v69Value))
            }
          }
          out.RawByte('}')
        }
      }
      out.RawByte(']')
    }
  }
  if len(in.Logs) != 0 {
    const prefix string = ",\"logs\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v70, v71 := range in.Logs {
        if v70 > 0 {
          out.RawByte(',')
        }
        if v71 == nil && (out.Flags & jwriter.NilMapAsEmpty) == 0 {
          out.RawString(`null`)
        } else {
          out.RawByte('{')
          v72First := true
          for v72Name, v72Value := range v71 {
            if v72First { v72First = false } else { out.RawByte(',') }
            out.String(string(v72Name))
            out.RawByte(':')
            if m, ok := v72Value.(easyjson.Marshaler); ok {
              m.MarshalEasyJSON(out)
            } else if m, ok := v72Value.(json.Marshaler); ok {
              out.Raw(m.MarshalJSON())
            } else {
              out.Raw(json.Marshal(v72Value))
            }
          }
          out.RawByte('}')
        }
      }
      out.RawByte(']')
    }
  }
  if len(in.Durations) != 0 {
    const prefix string = ",\"durations\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v73, v74 := range in.Durations {
        if v73 > 0 {
          out.RawByte(',')
        }
        out.Float64(float64(v74))
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v KernelLaunchInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation19(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KernelLaunchInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation19(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *KernelLaunchInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation19(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KernelLaunchInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation19(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation20(in *jlexer.Lexer, out *InputPrediction) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "input_id":
      out.InputID = string(in.String())
    case "input_index":
      out.InputIndex = int(in.Int())
    case "expected_label":
      out.ExpectedLabel = string(in.String())
    case "features":
      (out.Features).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation20(out *jwriter.Writer, in InputPrediction) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if in.InputID != "" {
    const prefix string = ",\"input_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.InputID))
  }
  if in.InputIndex != 0 {
    const prefix string = ",\"input_index\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.InputIndex))
  }
  if in.ExpectedLabel != "" {
    const prefix string = ",\"expected_label\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ExpectedLabel))
  }
  if len(in.Features) != 0 {
    const prefix string = ",\"features\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Features).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v InputPrediction) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation20(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputPrediction) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation20(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputPrediction) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation20(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputPrediction) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation20(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation21(in *jlexer.Lexer, out *GPUMemInformation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "gpuid":
      out.GPUID = int(in.Int())
    case "start_used":
      out.StartUsed = int64(in.Int64())
    case "start_free":
      out.StartFree = int64(in.Int64())
    case "start_total":
      out.StartTotal = int64(in.Int64())
    case "finish_used":
      out.FinishUsed = int64(in.Int64())
    case "finish_free":
      out.FinishFree = int64(in.Int64())
    case "finish_total":
      out.FinishTotal = int64(in.Int64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation21(out *jwriter.Writer, in GPUMemInformation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.GPUID != 0 {
    const prefix string = ",\"gpuid\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.GPUID))
  }
  if in.StartUsed != 0 {
    const prefix string = ",\"start_used\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartUsed))
  }
  if in.StartFree != 0 {
    const prefix string = ",\"start_free\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartFree))
  }
  if in.StartTotal != 0 {
    const prefix string = ",\"start_total\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.StartTotal))
  }
  if in.FinishUsed != 0 {
    const prefix string = ",\"finish_used\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishUsed))
  }
  if in.FinishFree != 0 {
    const prefix string = ",\"finish_free\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishFree))
  }
  if in.FinishTotal != 0 {
    const prefix string = ",\"finish_total\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.FinishTotal))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v GPUMemInformation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation21(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GPUMemInformation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation21(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *GPUMemInformation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation21(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GPUMemInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation21(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation22(in *jlexer.Lexer, out *Evaluation) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "user_id":
      out.UserID = string(in.String())
    case "run_id":
      out.RunID = int(in.Int())
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "framework":
      easyjson679db3deDecodeGithubComRaiProjectDlframework(in, &out.Framework)
    case "model":
      easyjson679db3deDecodeGithubComRaiProjectDlframework1(in, &out.Model)
    case "dataset_category":
      out.DatasetCategory = string(in.String())
    case "dataset_name":
      out.DatasetName = string(in.String())
    case "machine_architecture":
      out.MachineArchitecture = string(in.String())
    case "using_gpu":
      out.UsingGPU = bool(in.Bool())
    case "batch_size":
      out.BatchSize = int(in.Int())
    case "hostname":
      out.Hostname = string(in.String())
    case "trace_level":
      out.TraceLevel = string(in.String())
    case "model_accuracy_id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ModelAccuracyID).UnmarshalJSON(data) )
      }
    case "input_prediction_i_ds":
      if in.IsNull() {
        in.Skip()
        out.InputPredictionIDs = nil
      } else {
        in.Delim('[')
        if out.InputPredictionIDs == nil {
          if !in.IsDelim(']') {
            out.InputPredictionIDs = make([]bson.ObjectId, 0, 4)
          } else {
            out.InputPredictionIDs = []bson.ObjectId{}
          }
        } else { 
          out.InputPredictionIDs = (out.InputPredictionIDs)[:0]
        }
        for !in.IsDelim(']') {
          var v75 bson.ObjectId
          if data := in.Raw(); in.Ok() {
            in.AddError( (v75).UnmarshalJSON(data) )
          }
          out.InputPredictionIDs = append(out.InputPredictionIDs, v75)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "performance_id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.PerformanceID).UnmarshalJSON(data) )
      }
    case "public":
      out.Public = bool(in.Bool())
    case "metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Metadata = make(map[string]string)
        } else {
        out.Metadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v76 string
          v76 = string(in.String())
          (out.Metadata)[key] = v76
          in.WantComma()
        }
        in.Delim('}')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation22(out *jwriter.Writer, in Evaluation) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if in.UserID != "" {
    const prefix string = ",\"user_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UserID))
  }
  if in.RunID != 0 {
    const prefix string = ",\"run_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.RunID))
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"framework\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    easyjson679db3deEncodeGithubComRaiProjectDlframework(out, in.Framework)
  }
  if true {
    const prefix string = ",\"model\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    easyjson679db3deEncodeGithubComRaiProjectDlframework1(out, in.Model)
  }
  if in.DatasetCategory != "" {
    const prefix string = ",\"dataset_category\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DatasetCategory))
  }
  if in.DatasetName != "" {
    const prefix string = ",\"dataset_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DatasetName))
  }
  if in.MachineArchitecture != "" {
    const prefix string = ",\"machine_architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MachineArchitecture))
  }
  if in.UsingGPU {
    const prefix string = ",\"using_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.UsingGPU))
  }
  if in.BatchSize != 0 {
    const prefix string = ",\"batch_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.BatchSize))
  }
  if in.Hostname != "" {
    const prefix string = ",\"hostname\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Hostname))
  }
  if in.TraceLevel != "" {
    const prefix string = ",\"trace_level\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TraceLevel))
  }
  if in.ModelAccuracyID != "" {
    const prefix string = ",\"model_accuracy_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ModelAccuracyID).MarshalJSON() )
  }
  if len(in.InputPredictionIDs) != 0 {
    const prefix string = ",\"input_prediction_i_ds\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v77, v78 := range in.InputPredictionIDs {
        if v77 > 0 {
          out.RawByte(',')
        }
        out.Raw( (v78).MarshalJSON() )
      }
      out.RawByte(']')
    }
  }
  if in.PerformanceID != "" {
    const prefix string = ",\"performance_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.PerformanceID).MarshalJSON() )
  }
  if in.Public {
    const prefix string = ",\"public\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Public))
  }
  if len(in.Metadata) != 0 {
    const prefix string = ",\"metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v79First := true
      for v79Name, v79Value := range in.Metadata {
        if v79First { v79First = false } else { out.RawByte(',') }
        out.String(string(v79Name))
        out.RawByte(':')
        out.String(string(v79Value))
      }
      out.RawByte('}')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Evaluation) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation22(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Evaluation) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation22(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Evaluation) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation22(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Evaluation) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation22(l, v)
}
func easyjson679db3deDecodeGithubComRaiProjectDlframework1(in *jlexer.Lexer, out *dlframework.ModelManifest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "name":
      out.Name = string(in.String())
    case "version":
      out.Version = string(in.String())
    case "framework":
      if in.IsNull() {
        in.Skip()
        out.Framework = nil
      } else {
        if out.Framework == nil {
          out.Framework = new(dlframework.FrameworkManifest)
        }
        easyjson679db3deDecodeGithubComRaiProjectDlframework(in, &*out.Framework)
      }
    case "container":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Container = make(map[string]*dlframework.ContainerHardware)
        } else {
        out.Container = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v80 *dlframework.ContainerHardware
          if in.IsNull() {
            in.Skip()
            v80 = nil
          } else {
            if v80 == nil {
              v80 = new(dlframework.ContainerHardware)
            }
            easyjson679db3deDecodeGithubComRaiProjectDlframework2(in, &*v80)
          }
          (out.Container)[key] = v80
          in.WantComma()
        }
        in.Delim('}')
      }
    case "description":
      out.Description = string(in.String())
    case "reference":
      if in.IsNull() {
        in.Skip()
        out.Reference = nil
      } else {
        in.Delim('[')
        if out.Reference == nil {
          if !in.IsDelim(']') {
            out.Reference = make([]string, 0, 4)
          } else {
            out.Reference = []string{}
          }
        } else { 
          out.Reference = (out.Reference)[:0]
        }
        for !in.IsDelim(']') {
          var v81 string
          v81 = string(in.String())
          out.Reference = append(out.Reference, v81)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "license":
      out.License = string(in.String())
    case "inputs":
      if in.IsNull() {
        in.Skip()
        out.Inputs = nil
      } else {
        in.Delim('[')
        if out.Inputs == nil {
          if !in.IsDelim(']') {
            out.Inputs = make([]*dlframework.ModelManifest_Type, 0, 8)
          } else {
            out.Inputs = []*dlframework.ModelManifest_Type{}
          }
        } else { 
          out.Inputs = (out.Inputs)[:0]
        }
        for !in.IsDelim(']') {
          var v82 *dlframework.ModelManifest_Type
          if in.IsNull() {
            in.Skip()
            v82 = nil
          } else {
            if v82 == nil {
              v82 = new(dlframework.ModelManifest_Type)
            }
            easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest(in, &*v82)
          }
          out.Inputs = append(out.Inputs, v82)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "output":
      if in.IsNull() {
        in.Skip()
        out.Output = nil
      } else {
        if out.Output == nil {
          out.Output = new(dlframework.ModelManifest_Type)
        }
        easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest(in, &*out.Output)
      }
    case "before_preprocess":
      out.BeforePreprocess = string(in.String())
    case "preprocess":
      out.Preprocess = string(in.String())
    case "after_preprocess":
      out.AfterPreprocess = string(in.String())
    case "before_postprocess":
      out.BeforePostprocess = string(in.String())
    case "postprocess":
      out.Postprocess = string(in.String())
    case "after_postprocess":
      out.AfterPostprocess = string(in.String())
    case "model":
      if in.IsNull() {
        in.Skip()
        out.Model = nil
      } else {
        if out.Model == nil {
          out.Model = new(dlframework.ModelManifest_Model)
        }
        easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest1(in, &*out.Model)
      }
    case "attributes":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Attributes = make(map[string]string)
        } else {
        out.Attributes = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v83 string
          v83 = string(in.String())
          (out.Attributes)[key] = v83
          in.WantComma()
        }
        in.Delim('}')
      }
    case "hidden":
      out.Hidden = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectDlframework1(out *jwriter.Writer, in dlframework.ModelManifest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if in.Version != "" {
    const prefix string = ",\"version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Version))
  }
  if in.Framework != nil {
    const prefix string = ",\"framework\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      easyjson679db3deEncodeGithubComRaiProjectDlframework(out, *in.Framework)
  }
  if len(in.Container) != 0 {
    const prefix string = ",\"container\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v84First := true
      for v84Name, v84Value := range in.Container {
        if v84First { v84First = false } else { out.RawByte(',') }
        out.String(string(v84Name))
        out.RawByte(':')
        if v84Value == nil {
          out.RawString("null")
        } else {
          easyjson679db3deEncodeGithubComRaiProjectDlframework2(out, *v84Value)
        }
      }
      out.RawByte('}')
    }
  }
  if in.Description != "" {
    const prefix string = ",\"description\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Description))
  }
  if len(in.Reference) != 0 {
    const prefix string = ",\"reference\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v85, v86 := range in.Reference {
        if v85 > 0 {
          out.RawByte(',')
        }
        out.String(string(v86))
      }
      out.RawByte(']')
    }
  }
  if in.License != "" {
    const prefix string = ",\"license\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.License))
  }
  if len(in.Inputs) != 0 {
    const prefix string = ",\"inputs\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v87, v88 := range in.Inputs {
        if v87 > 0 {
          out.RawByte(',')
        }
        if v88 == nil {
          out.RawString("null")
        } else {
          easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest(out, *v88)
        }
      }
      out.RawByte(']')
    }
  }
  if in.Output != nil {
    const prefix string = ",\"output\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest(out, *in.Output)
  }
  if in.BeforePreprocess != "" {
    const prefix string = ",\"before_preprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BeforePreprocess))
  }
  if in.Preprocess != "" {
    const prefix string = ",\"preprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Preprocess))
  }
  if in.AfterPreprocess != "" {
    const prefix string = ",\"after_preprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AfterPreprocess))
  }
  if in.BeforePostprocess != "" {
    const prefix string = ",\"before_postprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BeforePostprocess))
  }
  if in.Postprocess != "" {
    const prefix string = ",\"postprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Postprocess))
  }
  if in.AfterPostprocess != "" {
    const prefix string = ",\"after_postprocess\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AfterPostprocess))
  }
  if in.Model != nil {
    const prefix string = ",\"model\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest1(out, *in.Model)
  }
  if len(in.Attributes) != 0 {
    const prefix string = ",\"attributes\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v89First := true
      for v89Name, v89Value := range in.Attributes {
        if v89First { v89First = false } else { out.RawByte(',') }
        out.String(string(v89Name))
        out.RawByte(':')
        out.String(string(v89Value))
      }
      out.RawByte('}')
    }
  }
  if in.Hidden {
    const prefix string = ",\"hidden\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Hidden))
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest1(in *jlexer.Lexer, out *dlframework.ModelManifest_Model) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "base_url":
      out.BaseUrl = string(in.String())
    case "weights_path":
      out.WeightsPath = string(in.String())
    case "graph_path":
      out.GraphPath = string(in.String())
    case "is_archive":
      out.IsArchive = bool(in.Bool())
    case "weights_checksum":
      out.WeightsChecksum = string(in.String())
    case "graph_checksum":
      out.GraphChecksum = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest1(out *jwriter.Writer, in dlframework.ModelManifest_Model) {
  out.RawByte('{')
  first := true
  _ = first
  if in.BaseUrl != "" {
    const prefix string = ",\"base_url\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BaseUrl))
  }
  if in.WeightsPath != "" {
    const prefix string = ",\"weights_path\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.WeightsPath))
  }
  if in.GraphPath != "" {
    const prefix string = ",\"graph_path\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphPath))
  }
  if in.IsArchive {
    const prefix string = ",\"is_archive\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.IsArchive))
  }
  if in.WeightsChecksum != "" {
    const prefix string = ",\"weights_checksum\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.WeightsChecksum))
  }
  if in.GraphChecksum != "" {
    const prefix string = ",\"graph_checksum\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphChecksum))
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifest(in *jlexer.Lexer, out *dlframework.ModelManifest_Type) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "type":
      out.Type = string(in.String())
    case "description":
      out.Description = string(in.String())
    case "parameters":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Parameters = make(map[string]*dlframework.ModelManifest_Type_Parameter)
        } else {
        out.Parameters = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v90 *dlframework.ModelManifest_Type_Parameter
          if in.IsNull() {
            in.Skip()
            v90 = nil
          } else {
            if v90 == nil {
              v90 = new(dlframework.ModelManifest_Type_Parameter)
            }
            easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifestType(in, &*v90)
          }
          (out.Parameters)[key] = v90
          in.WantComma()
        }
        in.Delim('}')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifest(out *jwriter.Writer, in dlframework.ModelManifest_Type) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Type != "" {
    const prefix string = ",\"type\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Type))
  }
  if in.Description != "" {
    const prefix string = ",\"description\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Description))
  }
  if len(in.Parameters) != 0 {
    const prefix string = ",\"parameters\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v91First := true
      for v91Name, v91Value := range in.Parameters {
        if v91First { v91First = false } else { out.RawByte(',') }
        out.String(string(v91Name))
        out.RawByte(':')
        if v91Value == nil {
          out.RawString("null")
        } else {
          easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifestType(out, *v91Value)
        }
      }
      out.RawByte('}')
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframeworkModelManifestType(in *jlexer.Lexer, out *dlframework.ModelManifest_Type_Parameter) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "value":
      out.Value = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectDlframeworkModelManifestType(out *jwriter.Writer, in dlframework.ModelManifest_Type_Parameter) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Value != "" {
    const prefix string = ",\"value\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Value))
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframework2(in *jlexer.Lexer, out *dlframework.ContainerHardware) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "gpu":
      out.Gpu = string(in.String())
    case "cpu":
      out.Cpu = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectDlframework2(out *jwriter.Writer, in dlframework.ContainerHardware) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Gpu != "" {
    const prefix string = ",\"gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Gpu))
  }
  if in.Cpu != "" {
    const prefix string = ",\"cpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Cpu))
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectDlframework(in *jlexer.Lexer, out *dlframework.FrameworkManifest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "name":
      out.Name = string(in.String())
    case "version":
      out.Version = string(in.String())
    case "container":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Container = make(map[string]*dlframework.ContainerHardware)
        } else {
        out.Container = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v92 *dlframework.ContainerHardware
          if in.IsNull() {
            in.Skip()
            v92 = nil
          } else {
            if v92 == nil {
              v92 = new(dlframework.ContainerHardware)
            }
            easyjson679db3deDecodeGithubComRaiProjectDlframework2(in, &*v92)
          }
          (out.Container)[key] = v92
          in.WantComma()
        }
        in.Delim('}')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectDlframework(out *jwriter.Writer, in dlframework.FrameworkManifest) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if in.Version != "" {
    const prefix string = ",\"version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Version))
  }
  if len(in.Container) != 0 {
    const prefix string = ",\"container\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v93First := true
      for v93Name, v93Value := range in.Container {
        if v93First { v93First = false } else { out.RawByte(',') }
        out.String(string(v93Name))
        out.RawByte(':')
        if v93Value == nil {
          out.RawString("null")
        } else {
          easyjson679db3deEncodeGithubComRaiProjectDlframework2(out, *v93Value)
        }
      }
      out.RawByte('}')
    }
  }
  out.RawByte('}')
}
func easyjson679db3deDecodeGithubComRaiProjectEvaluation23(in *jlexer.Lexer, out *Divergence) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "method":
      out.Method = string(in.String())
    case "value":
      out.Value = float64(in.Float64())
    case "source_prediction_id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.SourcePredictionID).UnmarshalJSON(data) )
      }
    case "target_prediction_id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.TargetPredictionID).UnmarshalJSON(data) )
      }
    case "source_input_prediction_input_id":
      out.SourceInputPredictionInputID = string(in.String())
    case "target_input_prediction_input_id":
      out.TargetInputPredictionInputID = string(in.String())
    case "source_features":
      (out.SourceFeatures).UnmarshalEasyJSON(in)
    case "target_features":
      (out.TargetFeatures).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson679db3deEncodeGithubComRaiProjectEvaluation23(out *jwriter.Writer, in Divergence) {
  out.RawByte('{')
  first := true
  _ = first
  if in.ID != "" {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  if true {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  if in.Method != "" {
    const prefix string = ",\"method\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Method))
  }
  if in.Value != 0 {
    const prefix string = ",\"value\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Float64(float64(in.Value))
  }
  if in.SourcePredictionID != "" {
    const prefix string = ",\"source_prediction_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.SourcePredictionID).MarshalJSON() )
  }
  if in.TargetPredictionID != "" {
    const prefix string = ",\"target_prediction_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.TargetPredictionID).MarshalJSON() )
  }
  if in.SourceInputPredictionInputID != "" {
    const prefix string = ",\"source_input_prediction_input_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.SourceInputPredictionInputID))
  }
  if in.TargetInputPredictionInputID != "" {
    const prefix string = ",\"target_input_prediction_input_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TargetInputPredictionInputID))
  }
  if len(in.SourceFeatures) != 0 {
    const prefix string = ",\"source_features\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.SourceFeatures).MarshalEasyJSON(out)
  }
  if len(in.TargetFeatures) != 0 {
    const prefix string = ",\"target_features\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.TargetFeatures).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Divergence) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson679db3deEncodeGithubComRaiProjectEvaluation23(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Divergence) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson679db3deEncodeGithubComRaiProjectEvaluation23(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Divergence) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson679db3deDecodeGithubComRaiProjectEvaluation23(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Divergence) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson679db3deDecodeGithubComRaiProjectEvaluation23(l, v)
}
